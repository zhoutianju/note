{"./":{"url":"./","title":"简介","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 个人笔记 请访问：https://zhoutianju.github.io/note/ Copyright © 2021 zhoutianju.All rights reserved. "},"maven/高版本-Maven-检查依赖冲突.html":{"url":"maven/高版本-Maven-检查依赖冲突.html","title":"高版本 Maven 检查依赖冲突","keywords":"","body":" last modified by zhoutianju , 2021-03-10 17:03:18 高版本 Maven 检查依赖冲突 高版本 Maven 使用 maven-dependency-plugin 3.0 版本以后不支持 -Dverbose 参数（见官方说明：https://maven.apache.org/plugins/maven-dependency-plugin/examples/resolving-conflicts-using-the-dependency-tree.html） 可使用以下命令指定插件版本执行： mvn org.apache.maven.plugins:maven-dependency-plugin:2.10:tree -Dverbose=true 如果有父子依赖的项目，且子 Module 未发布到仓库的时候，可使用以下命令在打包后执行： mvn package -Dmaven.test.skip=true org.apache.maven.plugins:maven-dependency-plugin:2.10:tree -Dverbose=true Copyright © 2021 zhoutianju.All rights reserved. "},"maven/编译器常量替换.html":{"url":"maven/编译器常量替换.html","title":"编译期常量替换","keywords":"","body":" last modified by zhoutianju , 2021-07-08 18:35:38 编译期常量替换 背景 Java 中运行时变量赋值或修改很灵活，有很多方式可以实现（例如：property 注入等），但有些情况必须要在编译期替换（类似 C 语言的预编译宏）就稍微麻烦点，例如下面这个场景： 注解的属性值需要根据不同环境使用不同的值，由于注解中的属性值必须是 final 的常量，因此没法通过任何运行时的手段赋值或修改 @Table(name = \"xxx\") // 希望 dev 环境使用 \"offline\"、prod 环境使用 \"online\" class Demo { } 解决方案 使用 Maven 插件 templating-maven-plugin 代码结构 . ├── pom.xml └── src └── main ├── java │ └── priv │ └── zhoutj │ └── demo │ ├── Demo.java │ ├── Main.java │ └── annotation │ └── Foo.java ├── java-dev # dev 环境编译时使用 │ └── priv │ └── zhoutj │ └── demo │ └── EnvConstant.java └── java-prod # prod 环境编译时使用 └── priv └── zhoutj └── demo └── EnvConstant.java src/main/java/priv/zhoutj/demo/Demo.java @Foo(name = EnvConstant.VALUE) public class Demo { } src/main/java-dev/priv/zhoutj/demo/EnvConstant.java public class EnvConstant { public static final String VALUE = \"offline\"; } src/main/java-prod/priv/zhoutj/demo/EnvConstant.java public class EnvConstant { public static final String VALUE = \"online\"; } pom.xml 4.0.0 priv.zhoutj.demo demo-compile-time-constant-replace 1.0.0-SNAPSHOT org.codehaus.mojo templating-maven-plugin 1.0.0 filter-src filter-sources true ${basedir}/src/main/java-${profiles.active} ${project.build.directory}/java-templates-generated-sources dev dev true prod prod IDEA 环境说明 IDEA 环境下需要将 src/main/java-prod 或 src/main/java-dev 其中一个加入到 source 根目录集合中，才能在 IDEA 中 run/debug 可参考：https://www.jetbrains.com/help/idea/content-roots.html#adding_content_root 代码参考 https://github.com/zhoutianju/demo-compile-time-constant-replace Copyright © 2021 zhoutianju.All rights reserved. "},"maven/单独下载依赖.html":{"url":"maven/单独下载依赖.html","title":"单独下载依赖","keywords":"","body":" last modified by zhoutianju , 2021-07-16 16:50:20 单独下载依赖 使用 maven-dependency-plugin get 子命令单独下载某个依赖 groupId=package.you.want artifactId=artifact-you-want version=1.2.3 transitive=false # 是否级联下载，默认 true mvn dependency:get -Dartifact=${groupId}:${artifactId}:${version} -Dtransitive=${transitive} Copyright © 2021 zhoutianju.All rights reserved. "},"shell/常用脚本片段.html":{"url":"shell/常用脚本片段.html","title":"常用脚本片段","keywords":"","body":" last modified by zhoutianju , 2021-09-28 17:08:17 常用脚本片段 如果上一个命令执行失败 if [ $? -ne 0 ]; then echo \"failed\" fi 判断输入参数 if [ $# -gt 0 ];then echo \"arg[1]: $1\" fi 替换 HTML 中的特殊字符 sed 's/&/\\&amp;/g; s//\\&gt;/g; s/\"/\\&quot;/g; s/'\"'\"'/\\&#39;/g' Copyright © 2021 zhoutianju.All rights reserved. "},"linux/CentOS-防火墙配置.html":{"url":"linux/CentOS-防火墙配置.html","title":"CentOS 防火墙配置","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 CentOS 防火墙配置 CentOS6 查看当前状态： /etc/init.d/iptables status 修改权限： vi /etc/sysconfig/iptables 重启防火墙： service iptables restart CentOS7 查看端口列表： firewall-cmd --permanent --list-port 打开端口： firewall-cmd --zone=public --add-port=80/tcp --permanent firewall-cmd --reload 关闭端口： firewall-cmd --zone=public --remove-port=80/tcp --permanent firewall-cmd --reload 检查端口是否打开： firewall-cmd --zone=public --query-port=8888/tcp 查看状态： systemctl status firewalld Copyright © 2021 zhoutianju.All rights reserved. "},"linux/logrotate-切割日志.html":{"url":"linux/logrotate-切割日志.html","title":"logrotate 切割日志","keywords":"","body":" last modified by zhoutianju , 2022-07-05 17:25:27 logrotate 切割日志 背景 需要 Flume 采集 Tomcat 的日志 catalina.out，就需要按天切分日志，过程中遇到一些坑，记录一下，供遇到相同问题的同学参考。 环境 CentOS 6.5（非 root 权限）、Tomcat 6.0.35、logrotate 3.15.1（由于后面提到的特殊需求，后来自己安装的 logrotate 版本，没有使用系统集成的版本） 方案 前期考虑过的几种方案： logrotate、cronolog 等日志切分工具 改造 Tomcat 的日志框架为可支持时间切分的 log4j 等 自己写脚本重启 Tomcat、备份日志，cron 定时执行 最终基于以下优势决定使用 logrotate： CentOS 集成的工具，不需要额外安装、配置环境（不需要高版本功能的话） 对 Tomcat 本身脚本无侵入，不需要重启 实现 用到的路径 系统集成的 logrotate（最终没有使用）：/usr/sbin/logrotate 自己安装的 logrotate：/home/hadoop/bin/logrotate Tomcat 路径：/home/hadoop/apache-tomcat-6.0.35 logrotate 配置文件路径：/home/hadoop/apache-tomcat-6.0.35/tomcat-log-cut logrotate 配置文件：tomcat-log-cut /home/hadoop/apache-tomcat-6.0.35/logs/catalina.out { rotate 7 dateext dateyesterday # 3.8.6 版本开始支持 # datehourago # 3.14.0 版本开始支持 dateformat .%Y%m%d notifempty missingok copytruncate } 测试方法 logrotate 的 -d 参数用于调试，不会真正执行文件切分 /home/hadoop/bin/logrotate -s /tmp/logrotate.status -d -f /home/hadoop/apache-tomcat-6.0.35/tomcat-log-cut logrotate的 -v 参数用于真正执行文件切分同时打印详细日志 /home/hadoop/bin/logrotate -s /tmp/logrotate.status -v -f /home/hadoop/apache-tomcat-6.0.35/tomcat-log-cut cron配置 # daily 0 0 * * * cd /your/conf/logrotate && /your/bin/logrotate -s daily.status -f daily.conf # hourly 0 * * * * cd /your/conf/logrotate && /your/bin/logrotate -s hourly.status -f hourly.conf 遇到的几个坑 全路径 crontab 脚本中需要使用全路径，包括命令和文件，建议参考上面的模版配置 root 权限 logrotate 默认使用 /var/lib/logrotate.status 记录状态，需要root权限，可使用 -s /xxx/logrotate.status 参数来指定其他有权限的文件记录状态 每日执行时间 之前在 logrotate 配置文件中配了 daily 参数，并且把配置文件放到了 /etc/logrotate.d/ 下面（需要 root 权限），但由于 logrotate 的 daily/weekly/monthly 使用 anacron 来执行的，每天执行时间是凌晨 3 点左右，不想改 anacron 的配置了，于是就没有再把配置文件托管到 /etc/logrotate.d/ 下，而是放到自定义的目录下手动配置 cron 来执行，可以精确指定到每天的 00:00 执行 时间后缀 由于Flume收集文件会根据文件创建时间做 HDFS 的分片，所以需要每天 00:00 分执行，而不是 23:59，而这样带来的问题是，时间后缀为当天的日期，但其实归档的日志是前一天的，查了下高版本的 logrotate 是支持配置文件里写 dateyesterday 参数的（3.8.0 版本开始支持的），使用前一天的日期做文件后缀，附 logrotate github 地址：https://github.com/logrotate/logrotate 归档文件重名 由于测试时手动执行生成过日期后缀的日志归档文件，再次执行时会因为文件重名而失败，需要注意将测试的归档文件删掉或移走，不然可能会影响 cron 定时调起的执行结果，错误信息类似：error: destination /home/hadoop/apache-tomcat-6.0.35/logs/catalina.out.20200217 already exists, skipping rotation Copyright © 2022 zhoutianju.All rights reserved. "},"linux/screen.html":{"url":"linux/screen.html","title":"screen","keywords":"","body":" last modified by zhoutianju , 2022-07-14 14:18:21 screen # 创建新 session screen -S zhoutianju # 列出所有 session screen -ls # 恢复某个被 detach 的 session（这两个一样） screen -d zhoutianju screen -r zhoutianju # 先踢掉前一个用户，再恢复（解决 Attached 连不上的问题） screen -D -r zhoutianju # 无法恢复则创建新的 screen screen -R zhoutianju 内部命令 # 创建新 window ctrl+a c # 杀掉 window ctrl+a k # 切换到指定 window ctrl+a (0-9) # 重命名 window 的 title ctrl+a A # 切换最近使用的两个 window ctrl+a ctrl+a # 按顺序切换到下一个 window ctrl+a space # detach 当前 session ctrl+a d # 列出全部 window 的 title ctrl+a '\"' # 滚动 ctrl+a up/down/pgUp/pgDown # 杀死某个 hang 住的 tab ctrl+a :kill .screenrc # 打开下方状态条 autodetach on startup_message off hardstatus alwayslastline shelltitle 'bash' hardstatus string '%{gk}[%{wk}%?%-Lw%?%{=b kR}(%{W}%n*%f %t%?(%u)%?%{=b kR})%{= w}%?%+Lw%?%? %{g}][%{d}%l%{g}][ %{= w}%Y/%m/%d %0C:%s%a%{g} ]%{W}' # 加载 .bash_profile shell -$SHELL Copyright © 2022 zhoutianju.All rights reserved. "},"linux/Docker-安装.html":{"url":"linux/Docker-安装.html","title":"Docker 安装","keywords":"","body":" last modified by zhoutianju , 2022-07-13 14:20:56 Docker 安装 集成脚本安装 官方文档：https://docs.docker.com/engine/install/centos/#install-using-the-convenience-script # 更新 yum yum update -y # 使用阿里云 yum 镜像安装 docker curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun # 启动 docker 系统服务 systemctl start docker # 查询 docker 系统服务状态 systemctl status docker # 关闭 docker 系统服务 # systemctl stop docker # 前台运行 dockerd # dockerd # docker hello-world 测试 docker run hello-world yum 安装（可选） 官方文档：https://docs.docker.com/engine/install/centos/#install-using-the-repository # 安装 yum-utils yum install -y yum-utils # yum add-repo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo # yum 安装 docker yum install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin yum 库相关其他操作 # 列出目前所有 yum 库 yum repolist all # yum disable yum-config-manager --disable beike-salt-3000 yum-config-manager --disable centos-extras # yum enable yum-config-manager --enable lianjia-extras yum-config-manager --enable lianjia-base Copyright © 2022 zhoutianju.All rights reserved. "},"mac/brew-安装指定版本的软件.html":{"url":"mac/brew-安装指定版本的软件.html","title":"brew 安装指定版本的软件","keywords":"","body":" last modified by zhoutianju , 2021-02-05 15:07:26 brew 安装指定版本的软件 查询版本 brew search xxx # xxx 为要安装的软件，例如：brew search node 安装 brew install xxx@??? # xxx@??? 为 search 返回的可安装的软件和版本，例如：brew install node@10 Copyright © 2021 zhoutianju.All rights reserved. "},"mac/Mac-应用程序使用的环境版本.html":{"url":"mac/Mac-应用程序使用的环境版本.html","title":"Mac 应用程序使用的环境版本","keywords":"","body":" last modified by zhoutianju , 2021-10-19 21:49:07 Mac 应用程序使用的环境版本 起因：需要在 mac 上用到 eclipse mat 分析 dump 文件，mat 只能运行在 jdk11+ 本地已存在： archive 安装的 oracal jdk 17（通过 $PATH 配置） dmg 包安装的 oracal jdk jdk1.8.0_261（可以在【系统偏好设置】里的【java 控制面板】看到具体路径） brew 安装的 openjdk@8(1.8.0_282) 安装了 mat 后，报 jdk 版本错误，说我用的是 1.8.0_282 于是通过 brew 安装了 openjdk@15，在启动还是报错，用 brew info openjdk@15 看了下，加了软连接 sudo ln -sfn /usr/local/opt/openjdk@15/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-15.jdk 同时看了下 ls /usr/local/opt/openjdk -l 指向的也是新安装的 openjdk@15，再启动就可以了 Copyright © 2021 zhoutianju.All rights reserved. "},"mac/根目录创建软链.html":{"url":"mac/根目录创建软链.html","title":"根目录创建软链","keywords":"","body":" last modified by zhoutianju , 2022-04-08 12:27:43 根目录创建软链 适用场景：Mac 根目录下无法创建文件夹，可以用下面的这个方法创建软链接 已验证系统版本：Big Sur 11.2.1 sudo vi /etc/synthetic.conf 文件格式：根目录文件夹 软链接目标目录（中间的分隔符是 Tab！） 文件内容样例： data0 /tmp home /tmp proc /Users/zhoutj/bin 修改后需重启生效 Copyright © 2022 zhoutianju.All rights reserved. "},"windows/CMD-修改字体为-Consolas-+-微软雅黑.html":{"url":"windows/CMD-修改字体为-Consolas-+-微软雅黑.html","title":"CMD 修改字体为 Consolas + 微软雅黑","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 CMD 修改字体为 Consolas + 微软雅黑 参考 CSDN 博客：https://blog.csdn.net/u011086331/article/details/81542848 第一步，备份以下注册表路径，可用于异常恢复： HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink 第二步，执行以下 Windows 批处理脚本，写入注册表： CMD.reg： Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\\TrueTypeFont] \"0\"=\"Lucida Console\" \"00\"=\"Consolas\" \"936\"=\"x\" [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Console\\RasterFonts] \"微软雅黑\"=\"msyh.ttc\" [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink] \"Consolas\"=hex(7):4d,00,53,00,59,00,48,00,2e,00,54,00,54,00,43,00,2c,00,ae,5f,\\ 6f,8f,c5,96,d1,9e,2c,00,31,00,32,00,38,00,2c,00,38,00,30,00,00,00,00,00 第三步，执行后重启 Copyright © 2021 zhoutianju.All rights reserved. "},"windows/创建软链.html":{"url":"windows/创建软链.html","title":"创建软链","keywords":"","body":" last modified by zhoutianju001 , 2022-07-05 17:41:24 创建软链 文件软链 set LINK_NAME=\"C:\\Users\\zhoutianju\\.bash_profile_windows\" set TARGET=\"C:\\Users\\zhoutianju\\Dropbox\\home\\.bash_profile_windows\" type %LINK_NAME% type %TARGET% del /q %LINK_NAME% mklink /d %LINK_NAME% %TARGET% 目录软链 set LINK_NAME=\"C:\\Users\\zhoutianju\\bin\" set TARGET=\"C:\\Users\\zhoutianju\\Dropbox\\bin\" dir %LINK_NAME% dir %TARGET% rmdir /s /q %LINK_NAME% mklink /d %LINK_NAME% %TARGET% Copyright © 2022 zhoutianju.All rights reserved. "},"wsl/开机时自动开启-WSL-ssh-服务.html":{"url":"wsl/开机时自动开启-WSL-ssh-服务.html","title":"开机时自动开启 WSL ssh 服务","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 开机时自动开启 WSL ssh 服务 背景 WSL 的默认终端软件虽然强于 CMD 但体验还是不太好（比如复制、粘贴等操作），习惯用 SSH 终端软件登录公司服务器，同时登录本地的 WSL。 由于 WSL 目前不支持 systemd（可参考：https://github.com/systemd/systemd/issues/8036），就需要每次开机或重启都先在 wsl 终端中执行 sudo service ssh start 才能正常使用 SSH 登录，可以尝试用下面的方法开机启动 WSL 的 ssh 服务。 操作方法 添加 sudo 白名单 WSL 修改 sudo 白名单（使用默认用户权限执行）： sudo chmod +w /etc/sudoers sudo echo \"$USER ALL=(ALL:ALL) NOPASSWD:ALL\" >> /etc/sudoers sudo chmod -w /etc/sudoers 必须要在 /etc/sudoers 文件最后写，否则有可能被前面的策略覆盖导致不生效 配置 Windows 计划任务 配置计划任务参考：Windows 安装 Nginx - 开机启动 - 计划任务 Windows 环境启动 WSL ssh 服务命令： C:\\Windows\\System32\\wsl.exe sudo service ssh start Copyright © 2021 zhoutianju.All rights reserved. "},"wsl/VPN-环境下-WSL-更新-DNS.html":{"url":"wsl/VPN-环境下-WSL-更新-DNS.html","title":"VPN 环境下 WSL 更新 DNS","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 VPN 环境下 WSL 更新 DNS 背景 由于在公司需要链接 VPN，链接后 VPN 设置了 DNS，但每次 WSL 启动会重置 DNS 配置（/etc/resolv.conf），无法同步 Windows 配置 解决方案 在终端登录脚本中增加从 Windows 同步 DNS 的命令（WSL 是可以执行 Windows ipconfig 命令的） echo '/mnt/c/Windows/system32/ipconfig.exe /all | iconv -f gbk -t utf-8 | grep \"DNS 服务器\" | cut -d \":\" -f 2 | grep -e \"^ [0-9]\" | sed \"s/^/nameserver/\" | sudo tee /etc/resolv.conf > /dev/null' >> ~/.bash_profile 具体过滤条件取决于你 Windows 的 ipconfig 命令的执行结果以及你本地的网络环境 Copyright © 2021 zhoutianju.All rights reserved. "},"git/全局配置.html":{"url":"git/全局配置.html","title":"全局配置","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 全局配置 git config 命令使用方法 # 全局作用域设置 x.y.z 的值 git config --global x.y.z 'value' # 全局作用域查看 x.y.z 的值 git config --global x.y.z # 全局作用域重置 x.y.z 的值 git config --global --unset x.y.z # 当前代码库作用域下设置 x.y.z git config x.y.z 'value' 设置代理 git config --global http.proxy http://127.0.0.1:7890 git config --global https.proxy http://127.0.0.1:7890 支持中文编码 git config --global core.quotepath false git config --global gui.encoding utf-8 git config --global i18n.commit.encoding utf-8 git config --global i18n.logoutputencoding utf-8 # bash 环境下 export LESSCHARSET=utf-8 # cmd 环境下 set LESSCHARSET=utf-8 # cmd 配置默认的 difftool、mergetool 为 beyond compare git config --global merge.tool bc3 git config --global mergetool.bc3.path \"c:/Program Files/Beyond Compare 4/bcomp.exe\" git config --global diff.tool bc3 git config --global difftool.bc3.path \"c:/Program Files/Beyond Compare 3/bcomp.exe\" 配置 mergetool 不产生 *.orig 文件 git config --global mergetool.keepBackup false 配置全局用户名、邮箱 git config --global user.name \"zhoutianju\" git config --global user.email \"tianju.zhou@gmail.com\" 配置 lg 子命令别名（优化日志显示） git config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)%Creset' --abbrev-commit\" 换行符 # 提交时转换为LF，检出时不转换 git config --global core.autocrlf input # 拒绝提交包含混合换行符的文件 git config --global core.safecrlf true 设置全局忽略 git config --global core.excludesfile .gitignore_global vi ~/.gitignore_global .gitignore_global： # Compiled class file *.class # Maven target/ # IntelliJ project files *.iml *.iws *.ipr .idea/ # eclipse project file .settings/ .classpath .project # Log file *.log # Package Files # *.jar *.war *.nar *.ear *.zip *.tar.gz *.rar # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml hs_err_pid* Copyright © 2021 zhoutianju.All rights reserved. "},"git/常用命令.html":{"url":"git/常用命令.html","title":"常用命令","keywords":"","body":" last modified by zhoutianju , 2021-07-20 12:00:46 常用命令 日志 # 查最近 3 次的提交文件 git log -3 --stat 回滚 # 放弃工作区所有修改 git checkout . git clean -f # 放弃暂存区所有修改 git reset HEAD # 强制回滚到某个版本 git reset --hard e377f60e28c8b84158 # 强制拉取覆盖本地 git fetch --all git reset --hard origin/master git pull diff # 暂存区 diff git diff --cached xxx rebase git rebase -i ${最早一次不需要 rebase 的版本} git rebase -i --root # rebase 到第一个版本 # pick \\ edit \\ drop upstream # 查看本地分支的 upstream git branch -vv # 修改本地分支的 upstream # 旧版本 Git git branch --set-upstream your_branch_name origin/your_branch_name # 新版本 Git git branch --set-upstream-to=origin/your_branch_name your_branch_name stash # 执行存储时，添加备注，方便查找，只用 git stash 也要可以的，但查找时不方便识别。 git stash save \"save message\" # 查看 stash 了哪些存储 git stash list # 显示做了哪些改动，默认show第一个存储，如果要显示其他存贮，后面加 stash@{$num}，比如第二个 git stash show stash@{1} git stash show # 显示第一个存储的改动，如果想显示其他存存储，命令：git stash show stash@{$num} -p ，比如第二个：git stash show stash@{1} -p git stash show -p # 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} git stash apply # 命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下,默认为第一个stash,即stash@{0}，如果要应用并删除其他stash，命令：git stash pop stash@{$num} ，比如应用并删除第二个：git stash pop stash@{1} git stash pop # 丢弃stash@{$num}存储，从列表中删除这个存储 git stash drop stash@{$num} # 删除所有缓存的stash git stash clear Copyright © 2021 zhoutianju.All rights reserved. "},"git/修改提交人、邮箱.html":{"url":"git/修改提交人、邮箱.html","title":"修改提交人、邮箱","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 修改提交人、邮箱 修改最近一次提交的提交人和邮箱 git commit --amend --author=\"username \" 修改历史提交记录 配合 rebase 子命令标记需要修改的提交记录为 e(edit) git commit --amend --author=\"username \" --no-edit git rebase --continue 修改 committer 用户名和邮箱 author 和 committer 的区别：author 为代码的作者，committer 是允许这次提交的人，一般是一个人，可参考：https://stackoverflow.com/a/18754896/11235455 可使用以下命令查看历史提交中的 author 和 committer（默认只显示 author）： git log --pretty=full 复制以下脚本在 repo 目录下执行 #!/bin/sh git filter-branch --env-filter ' OLD_EMAIL=\"zhoutianju@xxx.com\" CORRECT_NAME=\"zhoutianju\" CORRECT_EMAIL=\"tianju.zhou@gmail.com\" if [ \"$GIT_COMMITTER_EMAIL\" = \"$OLD_EMAIL\" ] then export GIT_COMMITTER_NAME=\"$CORRECT_NAME\" export GIT_COMMITTER_EMAIL=\"$CORRECT_EMAIL\" fi if [ \"$GIT_AUTHOR_EMAIL\" = \"$OLD_EMAIL\" ] then export GIT_AUTHOR_NAME=\"$CORRECT_NAME\" export GIT_AUTHOR_EMAIL=\"$CORRECT_EMAIL\" fi ' --tag-name-filter cat -- --branches --tags Copyright © 2021 zhoutianju.All rights reserved. "},"gitbook/安装.html":{"url":"gitbook/安装.html","title":"安装","keywords":"","body":" last modified by zhoutianju , 2021-02-05 15:09:45 安装 GitBook 前提 node（）、npm cnpm（可选，后面会提到如果使用了插件，可加速插件安装速度） mac 环境切换版本可参考：brew 安装指定版本的软件 安装（全局，非工程级别） npm install -g gitbook-cli # 注意不是 gitbook 这个已经过时了 gitbook -v # 会进初始化安装，gitbook 不会继承 npm 全局的源配置，暂时没有找到加速的方法，不过就执行一次 插件安装加速（工程级别，如果配置了更快的 npm 源或安装了 cnpm 的话） 如果工程中使用了 gitbook 的插件，打包的时候会报错，需要先 gitbook install，其实就是从 npm 源安装这些插件，但 gitbook 命令不会继承 npm 全局的源配置，因此下载很慢，可直接在工程根目录下执行（以 cnpm 为例） cnpm install gitbook-plugin-xxx 安装，xxx 即工程中 book.json 中声明的插件名字，例如 book.json 配置如下： { \"title\": \"个人笔记\", \"plugins\": [ \"-lunr\", \"-search\", \"search-plus\", \"-sharing\", \"github@2.0.0\", \"mermaid-gb3\", \"favicon\", \"hide-element\", \"signature\", \"code\", \"chapter-fold\", \"anchor-navigation-ex\" ], \"language\": \"zh-hans\", \"pluginsConfig\": { \"github\": { \"url\": \"https://github.com/zhoutianju/note\" }, \"favicon\": { \"shortcut\": \"/asset/favicon.ico\", \"bookmark\": \"/asset/favicon.ico\" }, \"hide-element\": { \"elements\": [ \".gitbook-link\" ] }, \"gitbook-plugin-signature\": { \"autoTimeStamp\": { \"color\": \"gray\", \"timeStampFormat\": \"YYYY-MM-DD HH:mm:ss\" }, \"autoCopyright\": { \"color\": \"gray\", \"owner\": \"zhoutianju\" } }, \"anchor-navigation-ex\": { \"showLevel\": false, \"printLog\": true, \"associatedWithSummary\": false, \"multipleH1\": false, \"mode\": \"float\" } } } 可使用如下命令安装插件 cnpm install gitbook-plugin--lunr cnpm install gitbook-plugin--search cnpm install gitbook-plugin-search-plus cnpm install gitbook-plugin--sharing cnpm install gitbook-plugin-github@2.0.0 cnpm install gitbook-plugin-mermaid-gb3 cnpm install gitbook-plugin-favicon cnpm install gitbook-plugin-hide-element cnpm install gitbook-plugin-signature cnpm install gitbook-plugin-code cnpm install gitbook-plugin-chapter-fold cnpm install gitbook-plugin-anchor-navigation-ex Copyright © 2021 zhoutianju.All rights reserved. "},"mysql/账号授权.html":{"url":"mysql/账号授权.html","title":"账号授权","keywords":"","body":" last modified by zhoutianju , 2021-10-09 16:50:14 账号授权 用户管理 -- 添加账号 CREATE USER 'qa' identified by 'd17cbdd785468dffa05a4aa1727efb33'; -- 删除账号 DROP USER 'qa'; 授权 -- 授权所有 ip，所有数据库 GRANT ALL PRIVILEGES ON *.* TO 'qa'@'%' IDENTIFIED BY 'd17cbdd785468dffa05a4aa1727efb33'; -- 授权 localhost，所有数据库 GRANT ALL PRIVILEGES ON *.* TO 'qa'@'localhost' IDENTIFIED BY 'd17cbdd785468dffa05a4aa1727efb33'; -- 授权只读给 scheuler_repl 库的所有表 GRANT SELECT ON executor_debug.* TO 'qa'@'%' IDENTIFIED BY 'd17cbdd785468dffa05a4aa1727efb33'; -- 吊销全部权限 REVOKE ALL FROM 'qa'@'%'; -- 吊销查询权限 REVOKE SELECT ON scheduler_repl.* FROM 'qa'@'%'; -- 刷新权限 FLUSH PRIVILEGES; 权限查询 -- 查询全部用户 SELECT DISTINCT CONCAT('User: ''',user,'''@''',host,''';') AS query FROM mysql.user; -- 查询指定用户 SHOW GRANTS FOR 'qa'@'%'; Copyright © 2021 zhoutianju.All rights reserved. "},"mysql/mysqldump.html":{"url":"mysql/mysqldump.html","title":"mysqldump","keywords":"","body":" last modified by zhoutianju , 2021-10-08 14:29:40 mysqldump 导出命令 mysqldump -h${host} -P${port} -u${user} -p${password} ${db} ${table} -w ${where} > ${dump_file} 例子 mysqldump -htjtx-126-196.58os.org -P23197 -ufeiliu_58dp -p4fd399017f290ea3 db58_feiliu storm_realtime_analyse_task_web6 -w \"id >= 1441\" --skip-lock-tables --set-gtid-purged=OFF > feiliu-dump.sql LOCK TABLES 问题 报错信息 mysqldump: Got error: 1044: Access denied for user 'feiliu_58dp'@'10.126.%' to database 'db58_feiliu' when doing LOCK TABLES 解决办法：增加参数--skip-lock-tables GTID 问题 报错信息 Warning: A partial dump from a server that has GTIDs will by default include the GTIDs of all transactions, even those that changed suppressed parts of the database. If you don't want to restore GTIDs, pass --set-gtid-purged=OFF. To make a complete dump, pass --all-databases --triggers --routines --events. GTID 是MySQL5.6+提供的全局事务ID，用于主从复制使用，开启GTID的数据库导出时都会报这个警告 GTID是运维需要关注的，开发过程中使用一下方式简单解决 解决办法：增加参数--set-gtid-purged=OFF 不导出CREATE语句 解决方法：增加参数--no-create-info 不导出结构化注释语句 解决方法：增加参数--compact 使用REPLACE INTO替代INSERT INTO 解决方法：增加参数--replace 导入命令 mysql -h${host} -P${port} -u${user} -p${password} ${db} 注意，如果导入mysqldump -w ${where}导出的条件筛选sql文件，并且需要保留导入目的数据库的当前数据，需要把sql文件中的drop table和create table手动去掉 Copyright © 2021 zhoutianju.All rights reserved. "},"oracle/Oracle-安装.html":{"url":"oracle/Oracle-安装.html","title":"Oracle 安装","keywords":"","body":" last modified by zhoutianju , 2022-07-13 14:20:30 Oracle 安装 Oracle Docker 安装部署 docker pull registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g docker run -d -p 1521:1521 --name oracle registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g docker ps docker exec -it oracle /bin/bash docker shell cd /home/oracle source .bash_profile sqlplus /nolog sqlplus 命令 conn /as sysdba alter user system identified by system; alter user sys identified by system; create user rd identified by 123456; grant connect,resource,dba to rd; ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED; alter system set processes=2000 scope=spfile; select * from dba_users t where t.username = 'rd'; 远程 sqlcl 测试 ./sql rd/123456@10.26.62.137:1521/helowin Copyright © 2022 zhoutianju.All rights reserved. "},"sqlserver/SQLServer-安装.html":{"url":"sqlserver/SQLServer-安装.html","title":"SQLServer 安装","keywords":"","body":" last modified by zhoutianju , 2022-09-05 15:42:22 SQLServer 安装 docker 安装 MSSQL # 拉镜像 docker pull mcr.microsoft.com/mssql/server # 启动 docker run -e \"ACCEPT_EULA=Y\" -e \"SA_PASSWORD=yourStrong@Password\" -p 1433:1433 -d mcr.microsoft.com/mssql/server:latest # 查看状态 docker stats # 复制 CONTAINER ID # 本地客户端连接，创建数据库 docker exec -it ${CONTAINER_ID} /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P yourStrong@Password # 1> CREATE DATABASE test # 2> go 客户端测试 # 查询版本 mssql-cli -S 10.26.62.137,1433 -U SA -P yourStrong@Password -d test -l 3 -Q 'select @@version' # 建表、插入数据、查询 mssql-cli -S 10.26.62.137,1433 -U SA -P yourStrong@Password -d test -l 3 # test> CREATE TABLE word_count ( # ..... id INT PRIMARY KEY IDENTITY (1, 1), # ..... word VARCHAR (50) NOT NULL # ..... ); # Time: 0.252s # Commands completed successfully. # test> insert into word_count (word) values ('hello'), ('world'); # Time: 0.252s # (2 rows affected) # test> select * from word_count; # Time: 0.452s # +------+--------+ # | id | word | # |------+--------| # | 1 | hello | # | 2 | world | # +------+--------+ # (2 rows affected) Copyright © 2022 zhoutianju.All rights reserved. "},"clickhouse/Clickhouse-安装.html":{"url":"clickhouse/Clickhouse-安装.html","title":"Clickhouse 安装","keywords":"","body":" last modified by , 2022-07-13 18:47:24 Clickhouse 安装 yum 安装 # 安装 yum-utils sudo yum install -y yum-utils # 添加 ClickHouse 的 yum repo sudo yum-config-manager --add-repo https://packages.clickhouse.com/rpm/clickhouse.repo # 安装 ClickHouse yum install -y clickhouse-server clickhouse-client # 启动 ClickHouse 系统服务 systemctl start clickhouse-server.service # 默认使用 9000 端口作为管理端口（与 php-fpm 默认端口冲突，如果部署了 php-fpm，需要修改其中一个的默认端口） # 8123 是客户端访问的默认端口 clickhouse-client --port 8123 Copyright © 2022 zhoutianju.All rights reserved. "},"nginx/Windows-安装-Nginx.html":{"url":"nginx/Windows-安装-Nginx.html","title":"Windows 安装 Nginx","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 Windows 安装 Nginx 参考 参考官方说明：http://nginx.org/en/docs/windows.html 安装 下载：http://nginx.org/en/docs/windows.html 说明：由于 Windows 编译环境不太好搭，就别用源码编译了，直接下载 zip 版本即可 安装步骤（本地安装了部分 MSYS2 的命令）： # 解压 unzip nginx-*.zip cd nginx-* # 以下命令需要使用 Windows cmd 环境运行！ # 启动（后台） start nginx # 查看后台进程 tasklist /fi \"imagename eq nginx.exe\" # 其他命令和 Linux 下一致 nginx -s stop # fast shutdown nginx -s quit # graceful shutdown nginx -s reload # changing configuration, starting new worker processes with a new configuration, graceful shutdown of old worker processes nginx -s reopen # re-opening log files 开机启动 启动脚本 配置开机启动（以 d:\\opt\\nginx-1.16.1 作为安装目录为例），start.bat 文件内容如下： @ECHO OFF REM Start Nginx tasklist /FI \"IMAGENAME eq nginx.exe\" 2>NUL | find /I /N \"nginx.exe\">NUL IF NOT \"%ERRORLEVEL%\"==\"0\" ( REM Nginx is NOT running, so start it d: cd \\opt\\nginx-1.16.1 start nginx.exe ECHO Nginx started. ) else ( ECHO Nginx is already running. ) 计划任务 Windows 创建计划任务（Windows 开始菜单搜索“计划”即可），开机启动，修改了以下配置项 常规 > 不管用户是否登陆都要运行、使用最高权限运行触发器 > 启动时操作 > 启动程序 start.bat Copyright © 2021 zhoutianju.All rights reserved. "},"nginx/Linux-安装-Nginx.html":{"url":"nginx/Linux-安装-Nginx.html","title":"Linux 安装 Nginx","keywords":"","body":" last modified by zhoutianju , 2021-05-08 12:35:35 Linux 安装 Nginx 安装 # 官网下载源码包 wget http://nginx.org/download/nginx-1.19.10.tar.gz tar -xzvf nginx-1.19.10.tar.gz cd nginx-1.19.10 # 配置安装（YOUR_DIST_PATH 设置为你需要安装的目标目录，例如：../nginx-1.19.10-dist） ./configure --prefix=${YOUR_DIST_PATH} --user=${USER} --with-stream --with-stream=dynamic --with-stream_realip_module --without-http_rewrite_module --without-http_gzip_module make && make install # 配置 PATH echo \"PATH=${PATH}:${YOUR_DIST_PATH}/sbin\" >> ~/.bash_profile source ~/.bash_profile # 启动（非 root 账号把 80 端口的 server 注释掉，否则会报错：没权限绑定 80 端口） nginx 配置文件 Demo nginx 根配置文件 Demo conf/nginx.conf： # ... load_module modules/ngx_stream_module.so; # ... http { # ... # server { # 非 root 账号把 80 端口的 server 注释掉 # # ... # listen 80; # # ... # } # ... include include-l7/*.conf; # 七层代理 } stream { include include-l4/*.conf; # 四层代理 } 四层代理配置文件 Demo conf/include-l4/db-proxy.conf： server { listen {LISTEN_PORT}; proxy_pass {REMOTE_HOST}:{REMOTE_PORT}; } 七层静态资源配置文件 Demo conf/include-l7/static.conf： server { listen {LISTEN_PORT}; charset utf-8; # access_log \"{NGINX_LOG_DIR}/access.log\"; # error_log \"{NGINX_LOG_DIR}/error.log\"; location / { root \"{YOUR_STATIC_PATH}\"; # 以 / 结尾 expires -1; } } 七层后端负载均衡配置文件 Demo conf/include-l7/upstream.conf： upstream {UPSTREAM_NAME} { server {REMOTE_SERVER_HOST}:{REMOTE_SERVER_PORT}; server {REMOTE_SERVER_HOST}:{REMOTE_SERVER_PORT}; } server { listen {LISTEN_PORT}; charset utf-8; location / { client_max_body_size 500m; proxy_pass http://{UPSTREAM_NAME}/; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Scheme $scheme; } } Copyright © 2021 zhoutianju.All rights reserved. "},"nginx/静态文件-403-错误.html":{"url":"nginx/静态文件-403-错误.html","title":"静态文件 403 错误","keywords":"","body":" last modified by zhoutianju , 2020-10-08 02:06:14 静态文件 403 错误 问题记录 配置： server { listen 9233; charset utf-8; access_log \"/usr/local/nginx/logs/access.log\"; error_log \"/usr/local/nginx/logs/error.log\"; set $dist_dir \"/root/xxx/dist/\"; # root 权限的目录 location / { alias \"$dist_dir\"; expires -1; } } 浏览器访问报 Nginx 403，error.log 记录如下错误： 2020/04/20 21:09:56 [error] 8374#0: *79668 \"/root/xxx/dist/index.html\" is forbidden (13: Permission denied), client: 10.252.148.50, server: , request: \"GET / HTTP/1.1\", host: \"10.9.15.51:9233\" 2020/04/20 21:09:56 [error] 8374#0: *79668 open() \"/root/xxx/dist/favicon.ico\" failed (13: Permission denied), client: 10.252.148.50, server: , request: \"GET /favicon.ico HTTP/1.1\", host: \"10.9.15.51:9233\", referrer: \"http://10.9.15.51:9233/\" 排查解决 ps -ef | grep nginx 查看 Nginx 启动用户，可以看到 nginx worker 进程是用 nobody 启动的： root 5137 1 0 2019 ? 00:00:00 nginx: master process /usr/local/nginx/nginx nobody 8374 5137 0 21:09 ? 00:00:00 nginx: worker process root 18271 7332 0 21:15 pts/5 00:00:00 grep --color nginx 因此需要将 Nginx 启动用户改为 root（和静态文件目录权限一致），修改 $NGINX_HOME/nginx.conf： # 启动用户，如果不指定则为 nobody user root; # 其他配置... 修改后 nginx -s reload，再查 ps -ef | grep nginx，可以看到新的 nginx worker 已经是用 root 启动的了： root 5137 1 0 2019 ? 00:00:00 nginx: master process /usr/local/nginx/nginx nobody 8374 5137 0 21:09 ? 00:00:00 nginx: worker process is shutting down root 17824 5137 0 21:14 ? 00:00:00 nginx: worker process root 18271 7332 0 21:15 pts/5 00:00:00 grep --color nginx 再次浏览器访问，可以正常访问到静态文件了。 Copyright © 2020 zhoutianju.All rights reserved. "},"nginx/URL-参数改为-path-重定向.html":{"url":"nginx/URL-参数改为-path-重定向.html","title":"URL 参数改为 path 重定向","keywords":"","body":" last modified by zhoutianju , 2020-10-08 02:06:14 URL 参数改为 path 重定向 背景：两套服务，旧的 URL 使用传参方式，新的使用 RESTful 风格，旧服务的域名现在给新服务用了，但之前有人保存了旧服务某些页面的 URL 现在就访问不了了，会默认访问到首页，因此需要兼容旧服务的 URL 风格，重定向到新服务 目标：提取旧 URL 的参数，拼接到新 URL path 中并重定向 例如：http://a.com/user?id=2333 -> http://a.com/user/2333 Nginx 配置如下： server { listen 8080; server_name a.com; # 说明：到这里之前还要经过域名的 Nginx，并且我无法修改，当前是一个下游的 Nginx # 中间省略其他配置 10000 行 # 下面比较重要！！！ # 旧版用户页 URL 重定向到新版用户页 location ^~ /user { # 正则匹配出 URL 参数里的用户 ID，拼接到新版 URL path 中，重定向并把 URL 参数清空 if ($args ~* \"schedulerId=(\\d+)\") { # 正则匹配出一组参数 set $id $1; # 这里必须要自定义一个变量赋值，不能在重定向里直接用 $1，不清楚为啥 # set $args ''; # 重定向后默认带之前的 URL 参数，可以这样把参数置空，也可以用下面的方法 rewrite /user http://a.com/user/$id? redirect; # 这里重定向的 URL 需要写域名，不然默认使用的是 http://a.com:8080/ 的域名，同理也可以重定向到任意其他域名 } } } Copyright © 2020 zhoutianju.All rights reserved. "},"rabbit-mq/Linux-安装-RabbitMQ.html":{"url":"rabbit-mq/Linux-安装-RabbitMQ.html","title":"Linux 安装 RabbitMQ","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 Linux 安装 RabbitMQ 安装 # 安装 erlang 环境（需要 root 权限） sudo yum install erlang # 指定一个你自己的安装路径 INSTALL_DIR='/opt' cd $INSTALL_DIR # 安装 RabbitMQ wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.15/rabbitmq-server-generic-unix-3.6.15.tar.xz tar -xJvf rabbitmq-server-generic-unix-3.6.15.tar.xz ln -s rabbitmq_server-3.6.15 rabbitmq echo \"RABBITMQ_HOME=$INSTALL_DIR/rabbitmq\" >> ~/.bash_profile echo 'export PATH=$PATH:$RABBITMQ_HOME/sbin' >> ~/.bash_profile source ~/.bash_profile # 启动 RabbitMQ rabbitmq-server -detached 安装插件 # 后台管理插件，其他插件可根据需求安装 rabbitmq-plugins enable rabbitmq_management # 项目中使用到了 STOMP 协议 rabbitmq-plugins enable rabbitmq_stomp 用户授权 默认用户（guest）只能本地访问。 如果搭建集群的话，只在一台节点上创建就可以，搭建集群后会同步元数据。 # 创建管理员用户，并赋权 rabbitmqctl add_user admin Pa55WOrd1 rabbitmqctl set_user_tags admin administrator # 创建业务用户，并赋权 rabbitmqctl add_user abc Pa55WOrd2 # 赋权（参数说明：用户名 资源正则表达式 写权限 读权限） rabbitmqctl set_permissions abc '.*' '.*' '.*' Copyright © 2021 zhoutianju.All rights reserved. "},"rabbit-mq/RabbitMQ-HA-集群部署.html":{"url":"rabbit-mq/RabbitMQ-HA-集群部署.html","title":"RabbitMQ HA 集群部署","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 RabbitMQ HA 集群部署 参考资料 https://objcoding.com/2018/10/19/rabbitmq-cluster/ HA 部署架构图 普通集群（无镜像队列） 多磁盘节点可实现元数据 HA，但主节点挂了会丢失未消费的消息 镜像队列集群 多磁盘节点可实现元数据 HA，同时镜像队列可以保证主节点挂了也不会丢失未消费的消息，但会增加镜像队列节点的网络、存储开销 同步 Erlang Cookie node1 cat ~/.erlang.cookie # 复制文件内容 node2、node3 # 先把服务停掉 rabbitmqctl stop # 修改 Erlang Cookie chmod +w ~/.erlang.cookie echo {node1 文件内容} > ~/.erlang.cookie chmod -w ~/.erlang.cookie # 启动服务 rabbitmq-server -detached 加入集群 关于 RabbitMQ 节点的域名： 默认使用短域名，即服务器上运行 hostname -s 得到的结果 node2（磁盘节点） # 因为修改了 .erlang.cookie 用 rabbitmqctl stop_app 可能杀不死，需要用 kill 杀 rabbitmqctl stop_app rabbitmqctl reset rabbitmqctl join_cluster rabbit@${node1_hostname} rabbitmqctl start_app node3（内存节点） rabbitmqctl stop_app rabbitmqctl reset rabbitmqctl join_cluster --ram rabbit@${node1_hostname} rabbitmqctl start_app 关于镜像队列 目前只配置了 2 个磁盘节点，1 个内存节点，用于备份元数据，基于 DP 的场景队列和消息生存周期较短，没有做镜像队列。其他业务可根据需求配置。 rabbitmqctl set_policy ha-other-app \"^other-app.\" '{\"ha-mode\":\"nodes\",\"ha-params\":[\"rabbit@nodeA\", \"rabbit@nodeB\"]}' HAProxy 负载均衡 安装 HAProxy # 指定一个你自己的安装路径 INSTALL_DIR='/opt' cd $INSTALL_DIR # 安装 HAProxy wget http://www.haproxy.org/download/2.2/src/haproxy-2.2.2.tar.gz tar -xzvf haproxy-2.2.2.tar.gz.tar cd haproxy-2.2.2 make TARGET=linux-glibc PREFIX=$INSTALL_DIR/haproxy && make install PREFIX=$INSTALL_DIR/haproxy echo \"HAPROXY_HOME=$INSTALL_DIR/haproxy\" >> ~/.bash_profile echo 'export PATH=$PATH:$HAPROXY_HOME/sbin' >> ~/.bash_profile source ~/.bash_profile # 写入重启命令 echo '#! /bin/bash cd $(dirname $0)/.. haproxy -f haproxy.cfg -p haproxy.pid -sf $(cat haproxy.pid)' >> $INSTALL_DIR/haproxy/sbin/haproxy-reload chmod +x $INSTALL_DIR/haproxy/sbin/haproxy-reload # 配置文件，参考下一小节 vi $INSTALL_DIR/haproxy/haproxy.cfg # 重启命令执行 haproxy-reload 配置 # 全局配置 global log 127.0.0.1 local2 # chroot /var/lib/haproxy pidfile /opt/haproxy/haproxy.pid # 替换成实际的安装目录 maxconn 20000 # user haproxy # group haproxy daemon # 默认配置 defaults log global mode tcp option tcplog option dontlognull retries 3 option redispatch maxconn 20000 timeout connect 5s timeout client 120s timeout server 120s # rabbitmq 消息服务代理 listen rabbitmq_cluster bind 0.0.0.0:5670 mode tcp balance roundrobin server rabbit1 ${node1_hostname}:5672 check inter 5000 rise 2 fall 2 server rabbit2 ${node2_hostname}:5672 check inter 5000 rise 2 fall 2 server rabbit3 ${node3_hostname}:5672 check inter 5000 rise 2 fall 2 # rabbitmq stomp 服务代理 listen rabbitmq_cluster_stomp bind 0.0.0.0:61610 mode tcp balance roundrobin server rabbit1 ${node1_hostname}:61613 check inter 5000 rise 2 fall 2 server rabbit2 ${node2_hostname}:61613 check inter 5000 rise 2 fall 2 server rabbit3 ${node3_hostname}:61613 check inter 5000 rise 2 fall 2 # Haproxy 后台监控 listen admin_stats bind 0.0.0.0:8100 mode http option httplog stats enable stats uri /stats stats refresh 5s HAProxy 自身 HA 可通过 Keepalived 实现 Copyright © 2021 zhoutianju.All rights reserved. "},"ftp/vsftpd-安装、配置.html":{"url":"ftp/vsftpd-安装、配置.html","title":"vsftpd 安装、配置","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 vsftpd 安装、配置 源码安装 安装 # 源码包下载地址（需要翻墙） wget https://security.appspot.com/downloads/vsftpd-3.0.3.tar.gz # 安装 make && make install # 编译时-lcap 找不到，需要先安装libcap-devel yum install libcap-devel # 无法使用虚拟用户登录，原因：编译 vsftpd 时没有使用 pam，由于 vsftpd/dummy 下有假的 security/pam_appl.h 头文件，如果检测到没有安装 pam-devel 则不会链接 pam 的库，需要安装 pam-devel yum -y install pam-devel 配置 将源码包中的 vsftpd.conf 拷贝到 /etc，修改相关配置 # 端口号 listen_port=2121 # 禁用匿名用户 anonymous_enable=NO # 启用本地用户 local_enable=YES # 启用写权限 write_enable=YES # 启用文件夹信息 dirmessage_enable=YES # 启用日志 xferlog_enable=YES # 限制带宽（B/s） local_max_rate=20000000 启动 /usr/local/sbin/vsftpd & 源安装 安装 yum -y install vsftpd 配置 # 默认是 NO listen=YES # 默认是 YES listen_ipv6=NO # 限制带宽（B/s） local_max_rate=20M # 匿名用户访问根目录，默认是 /var/ftp anon_root=/root/ftp-root # 设定匿名用户的最大传输速率，单位（B/s） anon_max_rate=20000000 启动 # 建议用root权限运行，否则会有各种问题 service vsftpd start 常见错误 426 Failure writing network stream.：以上错误由磁盘空间不足导致。 Starting vsftpd for vsftpd: 500 OOPS: vsftpd: not configured for standalone, must be started from inetd： service vsftpd start（yum安装）启动时报以上错误，需要增加 listen=YES 配置 Copyright © 2021 zhoutianju.All rights reserved. "},"ftp/vsftpd-配置虚拟用户.html":{"url":"ftp/vsftpd-配置虚拟用户.html","title":"vsftpd 配置虚拟用户","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 vsftpd 配置虚拟用户 前置条件 配置虚拟用户需要安装 pam-devel，源码安装时，编译前，如果没有需要先安装，否则客户端登陆会出现 530 Login incorrect 错误 yum -y install pam-devel 配置 第一步：开放配置 修改 /etc/vsftpd.conf（源安装 /etc/vsftpd/vsftpd.conf）： # 以下配置用于配置虚拟用户 # pam配置文件（对应 /etc/pam.d 下的配置文件名） pam_service_name=vsftpd # 启用虚拟用户 guest_enable=YES # 虚拟用户宿主用户（本地用户） guest_username=work # 虚拟用户使用宿主用户权限 virtual_use_local_privs=YES # 虚拟用户配置文件（用于为每个虚拟用户定制配置项） user_config_dir=/etc/vsftpd/vconf # 限制用户只能在自己根目录下 chroot_local_user=YES chroot_list_enable=NO allow_writeable_chroot=YES 第二步：创建虚拟用户名和密码 创建 vsftpd 配置文件夹 mkdir -p /etc/vsftpd cd /etc/vsftpd # 创建以下文件（文件名无所谓） # 文件名以loginuser.txt为例 # 奇数行为用户名，偶数行为密码 vi loginuser.txt loginuser.txt： upload-user pa55word 第三步：生成虚拟用户名和密码的数据库 创建数据库（数据库名称无所谓），数据库名以 login.db 为例，输入参数为第二步中的用户名密码文件名一致 db_load -T -t hash -f /etc/vsftpd/loginuser.txt /etc/vsftpd/login.db 生成数据库后用户名密码文件就没用了，出于安全考虑可以删掉 以上操作基于 db4-utils，如果没有请先安装 yum -y install db4-utils 第四步：配置 pam 创建或修改 /etc/pam.d/vsftpd（源码安装时需要创建，源安装需要修改，只保留下面两行，其他全注掉） 修改为以下下内容：（此处的 db 属性中的文件名需要与第三步中一致） vsftpd： auth sufficient pam_userdb.so db=/etc/vsftpd/login account sufficient pam_userdb.so db=/etc/vsftpd/login 第五步：创建虚拟用户定制配置 文件夹名无所谓（但需要与第一步中 user_config_dir 属性匹配），以 /etc/vsftpd/vconf 为例 mkdir -p /etc/vsftpd/vconf cd /etc/vsftpd/vconf 为某个虚拟用户创建配置文件，文件名需要和用户名一致，以 work 为例。 work： # 指定虚拟用户的具体主路径 local_root=/home/work/shell # 设定并发客户端访问个数 max_clients=10 # 设定该用户的最大传输速率，单位b/s local_max_rate=20000000 第六步：重启 vsftpd 服务即可 Copyright © 2021 zhoutianju.All rights reserved. "},"ftp/URL-访问加用户名、密码.html":{"url":"ftp/URL-访问加用户名、密码.html","title":"URL 访问加用户名、密码","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 URL 访问加用户名、密码 使用以下形式：ftp://user:password@hostname 例如： ftp://work:12345@10.11.11.11:2121 ftp://work:12345@10.11.11.11:2121/test.jar Copyright © 2021 zhoutianju.All rights reserved. "},"ftp/Windows-一键上传-FTP-脚本配置.html":{"url":"ftp/Windows-一键上传-FTP-脚本配置.html","title":"Windows 一键上传 FTP 脚本配置","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 Windows 一键上传 FTP 脚本配置 问题及思路 公司开发环境需要通过堡垒机跳转服务器，传输文件比较麻烦，搭建了 FTP 服务后，考虑在 Windows 开发环境下配置一套一键上传文件到 FTP 的脚本，增加日常工作效率。 配置步骤 在指定位置创建以下两个 bat 脚本： ftp-cmd.bat： @echo off set tmp=%* set tmp=%tmp: =% set tmp=%tmp:\\=% set tmp=%tmp::=% echo open %FTP_SERVER_IP% > %tmp% echo user %FTP_USER% %FTP_PASSWORD% >> %tmp% echo %* >> %tmp% echo quit >> %tmp% ftp -v -i -n -s:%tmp% 2>&1 del %tmp% copy-ftp-url.bat： @echo off setlocal EnableDelayedExpansion set filepath=%1 set dir=%cd% set filename=!filepath:*%dir%\\=! set/p=\"ftp://%FTP_SERVER_IP%/%filename%\" 注册表配置自定义右键菜单： 创建 HKEY_CLASSES_ROOT\\*\\shell\\upload ftp 及 HKEY_CLASSES_ROOT\\*\\shell\\upload ftp\\command 两个目录 在 HKEY_CLASSES_ROOT\\*\\shell\\upload ftp\\command 的默认值中写入：%DIR_TO_SAVE_BAT_SCRIPT%\\ftp-cmd.bat put %1 && %DIR_TO_SAVE_BAT_SCRIPT%\\copy-ftp-url.bat %1 以上配置完成后，就可以在任意文件上邮件点击 upload ftp 实现上传该文件到 FTP，并把 FTP 的 URL 复制到剪贴板，在服务器上可运行 wget $url 进行下载 说明 主要思路是把交互式命令 ftp 转为非交互式，在 Windows 下比较麻烦，需要用到 -s:file 参数，把要执行的命令预先存到一个临时文件中，这一点在 Linux 下可用以下脚本轻松实现： ftp-cmd.sh： #!/bin/bash # Usage: ./ftp-cmd.sh put ${filename} ftp -in ${FTP_SERVER_IP} ftp-cmd.bat 脚本说明： 用输入的所有参数拼接为临时文件名（为了避免同时执行多个命令时有冲突），并替换掉其中一些 Windwos 下的文件名关键字 set tmp=%* set tmp=%tmp: =% set tmp=%tmp:\\=% set tmp=%tmp::=% 拼接 FTP 命令存到临时文件，使用 -s:file 指定命令从临时文件读取，执行后删除临时文件 echo open %FTP_SERVER_IP% > %tmp% echo user %FTP_USER% %FTP_PASSWORD% >> %tmp% echo %* >> %tmp% echo quit >> %tmp% ftp -v -i -n -s:%tmp% 2>&1 del %tmp% Copyright © 2021 zhoutianju.All rights reserved. "},"regex/常用正则表达式.html":{"url":"regex/常用正则表达式.html","title":"常用正则表达式","keywords":"","body":" last modified by zhoutianju , 2022-07-27 12:46:36 常用正则表达式 IP 或域名 ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]*[a-zA-Z0-9])\\.)+([A-Za-z]|[A-Za-z][A-Za-z0-9\\-]*[A-Za-z0-9])$ demo: https://regexr.com/3dt4r Copyright © 2022 zhoutianju.All rights reserved. "},"lucene/常用-Lucene-语法.html":{"url":"lucene/常用-Lucene-语法.html","title":"常用 Lucene 语法","keywords":"","body":" last modified by , 2022-09-27 17:43:41 常用 Lucene 语法 模糊查询： logger: com.dianping.cat* Copyright © 2022 zhoutianju.All rights reserved. "},"网络/DNS-A-记录和-CNAME-记录.html":{"url":"网络/DNS-A-记录和-CNAME-记录.html","title":"DNS A 记录和 CNAME 记录","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 DNS A 记录和 CNAME 记录 A 记录 A 记录（Adress 记录），创建域名和 IP 地址的映射，同时也可以设置域名的二级域名。 A 记录用途：可以在输入域名时不用输入 WWW. 来访问网站。 CNAME 记录 CNAME 记录（别名记录），创建域名到另外域名的映射，通常用于同时提供 WWW 和 MAIL 服务的计算机，例如，有一台计算机名为 host.mydomain.com（A 记录）。它同时提供 WWW 和 MAIL 服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW 和 MAIL。这两个别名的全称就 http://www.mydomain.com/ 和 mail.mydomain.com。实际上他们都指向 host.mydomain.com。 CNAME 记录用途：CNAME 将几个主机名指向一个别名，其实跟指向 IP 地址是一样的，因为这个别名也要做一个 A 记录的。但是使用 CNAME 记录可以很方便地变更 IP 地址。如果一台服务器有100个网站，他们都做了别名，该台服务器变更 IP 时，只需要变更别名的 A 记录就可以了。 Copyright © 2021 zhoutianju.All rights reserved. "},"杂项/Kindle-电子书导出-PDF-格式.html":{"url":"杂项/Kindle-电子书导出-PDF-格式.html","title":"Kindle 电子书导出 PDF 格式","keywords":"","body":" last modified by zhoutianju , 2021-02-05 14:34:39 Kindle 电子书导出 PDF 格式 导出方法可参考：https://www.jianshu.com/p/a00a188044b5 解除 DRM 方法可参考：http://www.zhushiyao.com/?p=38356 特别说明：Calibre 5.X 已经升级了 Python3，DeDRM 插件的主分支还没有升级，Github README 中作者也做了说明，目前尚不支持 5.X，但将来会支持，因此需要安装 Calibre 的早期版本，实际安装的是 4.X。 Copyright © 2021 zhoutianju.All rights reserved. "}}