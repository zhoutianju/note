{"./":{"url":"./","title":"简介","keywords":"","body":" last modified by zhoutianju , 2020-10-29 12:43:33 个人笔记 请访问：https://zhoutianju.github.io/note/ Copyright © 2020 zhoutianju.All rights reserved. "},"linux/CentOS-防火墙配置.html":{"url":"linux/CentOS-防火墙配置.html","title":"CentOS 防火墙配置","keywords":"","body":" last modified by zhoutianju , 2020-11-03 16:21:33 CentOS 防火墙配置 CentOS6 查看当前状态： /etc/init.d/iptables status 修改权限： vi /etc/sysconfig/iptables 重启防火墙： service iptables restart CentOS7 查看端口列表： firewall-cmd --permanent --list-port 打开端口： firewall-cmd --zone=public --add-port=80/tcp --permanent firewall-cmd --reload 关闭端口： firewall-cmd --zone=public --remove-port=80/tcp --permanent firewall-cmd --reload 检查端口是否打开： firewall-cmd --zone=public --query-port=8888/tcp 查看状态： systemctl status firewalld Copyright © 2020 zhoutianju.All rights reserved. "},"nginx/Windows-安装-Nginx.html":{"url":"nginx/Windows-安装-Nginx.html","title":"Windows 安装 Nginx","keywords":"","body":" last modified by zhoutianju , 2020-10-29 12:43:14 Windows 安装 Nginx 参考官方说明：http://nginx.org/en/docs/windows.html 下载：http://nginx.org/en/docs/windows.html 说明：由于 Windows 编译环境不太好搭，就别用源码编译了，直接下载 zip 版本即可 安装步骤（本地安装了部分 MSYS2 的命令）： # 解压 unzip nginx-*.zip cd nginx-* # 以下命令需要使用 Windows cmd 环境运行！ # 启动（后台） start nginx # 查看后台进程 tasklist /fi \"imagename eq nginx.exe\" # 其他命令和 Linux 下一致 nginx -s stop # fast shutdown nginx -s quit # graceful shutdown nginx -s reload # changing configuration, starting new worker processes with a new configuration, graceful shutdown of old worker processes nginx -s reopen # re-opening log files 配置开机启动（以 d:\\opt\\nginx-1.16.1 作为安装目录为例），start.bat 文件内容如下： @ECHO OFF REM Start Nginx tasklist /FI \"IMAGENAME eq nginx.exe\" 2>NUL | find /I /N \"nginx.exe\">NUL IF NOT \"%ERRORLEVEL%\"==\"0\" ( REM Nginx is NOT running, so start it d: cd \\opt\\nginx-1.16.1 start nginx.exe ECHO Nginx started. ) else ( ECHO Nginx is already running. ) Windows 创建计划任务（Windows 开始菜单搜索“计划”即可），开机启动，修改了以下配置项 常规 > 不管用户是否登陆都要运行、使用最高权限运行触发器 > 启动时操作 > 启动程序 start.bat Copyright © 2020 zhoutianju.All rights reserved. "},"nginx/静态文件-403-错误.html":{"url":"nginx/静态文件-403-错误.html","title":"静态文件 403 错误","keywords":"","body":" last modified by zhoutianju , 2020-10-29 12:43:31 静态文件 403 错误 问题记录 配置： server { listen 9233; charset utf-8; access_log \"/usr/local/nginx/logs/access.log\"; error_log \"/usr/local/nginx/logs/error.log\"; set $dist_dir \"/root/xxx/dist/\"; # root 权限的目录 location / { alias \"$dist_dir\"; expires -1; } } 浏览器访问报 Nginx 403，error.log 记录如下错误： 2020/04/20 21:09:56 [error] 8374#0: *79668 \"/root/xxx/dist/index.html\" is forbidden (13: Permission denied), client: 10.252.148.50, server: , request: \"GET / HTTP/1.1\", host: \"10.9.15.51:9233\" 2020/04/20 21:09:56 [error] 8374#0: *79668 open() \"/root/xxx/dist/favicon.ico\" failed (13: Permission denied), client: 10.252.148.50, server: , request: \"GET /favicon.ico HTTP/1.1\", host: \"10.9.15.51:9233\", referrer: \"http://10.9.15.51:9233/\" 排查解决 ps -ef | grep nginx 查看 Nginx 启动用户，可以看到 nginx worker 进程是用 nobody 启动的： root 5137 1 0 2019 ? 00:00:00 nginx: master process /usr/local/nginx/nginx nobody 8374 5137 0 21:09 ? 00:00:00 nginx: worker process root 18271 7332 0 21:15 pts/5 00:00:00 grep --color nginx 因此需要将 Nginx 启动用户改为 root（和静态文件目录权限一致），修改 $NGINX_HOME/nginx.conf： # 启动用户，如果不指定则为 nobody user root; # 其他配置... 修改后 nginx -s reload，再查 ps -ef | grep nginx，可以看到新的 nginx worker 已经是用 root 启动的了： root 5137 1 0 2019 ? 00:00:00 nginx: master process /usr/local/nginx/nginx nobody 8374 5137 0 21:09 ? 00:00:00 nginx: worker process is shutting down root 17824 5137 0 21:14 ? 00:00:00 nginx: worker process root 18271 7332 0 21:15 pts/5 00:00:00 grep --color nginx 再次浏览器访问，可以正常访问到静态文件了。 Copyright © 2020 zhoutianju.All rights reserved. "},"nginx/URL-参数改为-path-重定向.html":{"url":"nginx/URL-参数改为-path-重定向.html","title":"URL 参数改为 path 重定向","keywords":"","body":" last modified by zhoutianju , 2020-10-29 12:43:32 URL 参数改为 path 重定向 背景：两套服务，旧的 URL 使用传参方式，新的使用 RESTful 风格，旧服务的域名现在给新服务用了，但之前有人保存了旧服务某些页面的 URL 现在就访问不了了，会默认访问到首页，因此需要兼容旧服务的 URL 风格，重定向到新服务 目标：提取旧 URL 的参数，拼接到新 URL path 中并重定向 例如：http://a.com/user?id=2333 -> http://a.com/user/2333 Nginx 配置如下： server { listen 8080; server_name a.com; # 说明：到这里之前还要经过域名的 Nginx，并且我无法修改，当前是一个下游的 Nginx # 中间省略其他配置 10000 行 # 下面比较重要！！！ # 旧版用户页 URL 重定向到新版用户页 location ^~ /user { # 正则匹配出 URL 参数里的用户 ID，拼接到新版 URL path 中，重定向并把 URL 参数清空 if ($args ~* \"schedulerId=(\\d+)\") { # 正则匹配出一组参数 set $id $1; # 这里必须要自定义一个变量赋值，不能在重定向里直接用 $1，不清楚为啥 # set $args ''; # 重定向后默认带之前的 URL 参数，可以这样把参数置空，也可以用下面的方法 rewrite /user http://a.com/user/$id? redirect; # 这里重定向的 URL 需要写域名，不然默认使用的是 http://a.com:8080/ 的域名，同理也可以重定向到任意其他域名 } } } Copyright © 2020 zhoutianju.All rights reserved. "},"rabbit-mq/Linux-安装-RabbitMQ.html":{"url":"rabbit-mq/Linux-安装-RabbitMQ.html","title":"Linux 安装 RabbitMQ","keywords":"","body":" last modified by zhoutianju , 2020-10-30 17:35:41 Linux 安装 RabbitMQ 安装 # 安装 erlang 环境（需要 root 权限） sudo yum install erlang # 指定一个你自己的安装路径 INSTALL_DIR='/opt' cd $INSTALL_DIR # 安装 RabbitMQ wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.15/rabbitmq-server-generic-unix-3.6.15.tar.xz tar -xJvf rabbitmq-server-generic-unix-3.6.15.tar.xz ln -s rabbitmq_server-3.6.15 rabbitmq echo \"RABBITMQ_HOME=$INSTALL_DIR/rabbitmq\" >> ~/.bash_profile echo 'export PATH=$PATH:$RABBITMQ_HOME/sbin' >> ~/.bash_profile source ~/.bash_profile # 启动 RabbitMQ rabbitmq-server -detached 安装插件 # 后台管理插件，其他插件可根据需求安装 rabbitmq-plugins enable rabbitmq_management # 项目中使用到了 STOMP 协议 rabbitmq-plugins enable rabbitmq_stomp 用户授权 默认用户（guest）只能本地访问。 如果搭建集群的话，只在一台节点上创建就可以，搭建集群后会同步元数据。 # 创建管理员用户，并赋权 rabbitmqctl add_user admin Pa55WOrd1 rabbitmqctl set_user_tags admin administrator # 创建业务用户，并赋权 rabbitmqctl add_user abc Pa55WOrd2 # 赋权（参数说明：用户名 资源正则表达式 写权限 读权限） rabbitmqctl set_permissions abc '.*' '.*' '.*' Copyright © 2020 zhoutianju.All rights reserved. "},"rabbit-mq/RabbitMQ-HA-集群部署.html":{"url":"rabbit-mq/RabbitMQ-HA-集群部署.html","title":"RabbitMQ HA 集群部署","keywords":"","body":" last modified by zhoutianju , 2020-11-02 14:06:10 RabbitMQ HA 集群部署 参考资料 https://objcoding.com/2018/10/19/rabbitmq-cluster/ HA 部署架构图 普通集群（无镜像队列） 多磁盘节点可实现元数据 HA，但主节点挂了会丢失未消费的消息 镜像队列集群 多磁盘节点可实现元数据 HA，同时镜像队列可以保证主节点挂了也不会丢失未消费的消息，但会增加镜像队列节点的网络、存储开销 同步 Erlang Cookie node1 cat ~/.erlang.cookie # 复制文件内容 node2、node3 # 先把服务停掉 rabbitmqctl stop # 修改 Erlang Cookie chmod +w ~/.erlang.cookie echo {node1 文件内容} > ~/.erlang.cookie chmod -w ~/.erlang.cookie # 启动服务 rabbitmq-server -detached 加入集群 关于 RabbitMQ 节点的域名： 默认使用短域名，即服务器上运行 hostname -s 得到的结果 node2（磁盘节点） # 因为修改了 .erlang.cookie 用 rabbitmqctl stop_app 可能杀不死，需要用 kill 杀 rabbitmqctl stop_app rabbitmqctl reset rabbitmqctl join_cluster rabbit@${node1_hostname} rabbitmqctl start_app node3（内存节点） rabbitmqctl stop_app rabbitmqctl reset rabbitmqctl join_cluster --ram rabbit@${node1_hostname} rabbitmqctl start_app 关于镜像队列 目前只配置了 2 个磁盘节点，1 个内存节点，用于备份元数据，基于 DP 的场景队列和消息生存周期较短，没有做镜像队列。其他业务可根据需求配置。 rabbitmqctl set_policy ha-other-app \"^other-app.\" '{\"ha-mode\":\"nodes\",\"ha-params\":[\"rabbit@nodeA\", \"rabbit@nodeB\"]}' HAProxy 负载均衡 安装 HAProxy # 指定一个你自己的安装路径 INSTALL_DIR='/opt' cd $INSTALL_DIR # 安装 HAProxy wget http://www.haproxy.org/download/2.2/src/haproxy-2.2.2.tar.gz tar -xzvf haproxy-2.2.2.tar.gz.tar cd haproxy-2.2.2 make TARGET=linux-glibc PREFIX=$INSTALL_DIR/haproxy && make install PREFIX=$INSTALL_DIR/haproxy echo \"HAPROXY_HOME=$INSTALL_DIR/haproxy\" >> ~/.bash_profile echo 'export PATH=$PATH:$HAPROXY_HOME/sbin' >> ~/.bash_profile source ~/.bash_profile # 写入重启命令 echo '#! /bin/bash cd $(dirname $0)/.. haproxy -f haproxy.cfg -p haproxy.pid -sf $(cat haproxy.pid)' >> $INSTALL_DIR/haproxy/sbin/haproxy-reload chmod +x $INSTALL_DIR/haproxy/sbin/haproxy-reload # 配置文件，参考下一小节 vi $INSTALL_DIR/haproxy/haproxy.cfg # 重启命令执行 haproxy-reload 配置 # 全局配置 global log 127.0.0.1 local2 # chroot /var/lib/haproxy pidfile /opt/haproxy/haproxy.pid # 替换成实际的安装目录 maxconn 20000 # user haproxy # group haproxy daemon # 默认配置 defaults log global mode tcp option tcplog option dontlognull retries 3 option redispatch maxconn 20000 timeout connect 5s timeout client 120s timeout server 120s # rabbitmq 消息服务代理 listen rabbitmq_cluster bind 0.0.0.0:5670 mode tcp balance roundrobin server rabbit1 ${node1_hostname}:5672 check inter 5000 rise 2 fall 2 server rabbit2 ${node2_hostname}:5672 check inter 5000 rise 2 fall 2 server rabbit3 ${node3_hostname}:5672 check inter 5000 rise 2 fall 2 # rabbitmq stomp 服务代理 listen rabbitmq_cluster_stomp bind 0.0.0.0:61610 mode tcp balance roundrobin server rabbit1 ${node1_hostname}:61613 check inter 5000 rise 2 fall 2 server rabbit2 ${node2_hostname}:61613 check inter 5000 rise 2 fall 2 server rabbit3 ${node3_hostname}:61613 check inter 5000 rise 2 fall 2 # Haproxy 后台监控 listen admin_stats bind 0.0.0.0:8100 mode http option httplog stats enable stats uri /stats stats refresh 5s HAProxy 自身 HA 可通过 Keepalived 实现 Copyright © 2020 zhoutianju.All rights reserved. "},"ftp/vsftpd-安装、配置.html":{"url":"ftp/vsftpd-安装、配置.html","title":"vsftpd 安装、配置","keywords":"","body":" last modified by zhoutianju , 2020-11-03 16:40:40 vsftpd 安装、配置 源码安装 安装 # 源码包下载地址（需要翻墙） wget https://security.appspot.com/downloads/vsftpd-3.0.3.tar.gz # 安装 make && make install # 编译时-lcap 找不到，需要先安装libcap-devel yum install libcap-devel # 无法使用虚拟用户登录，原因：编译 vsftpd 时没有使用 pam，由于 vsftpd/dummy 下有假的 security/pam_appl.h 头文件，如果检测到没有安装 pam-devel 则不会链接 pam 的库，需要安装 pam-devel yum -y install pam-devel 配置 将源码包中的 vsftpd.conf 拷贝到 /etc，修改相关配置 # 端口号 listen_port=2121 # 禁用匿名用户 anonymous_enable=NO # 启用本地用户 local_enable=YES # 启用写权限 write_enable=YES # 启用文件夹信息 dirmessage_enable=YES # 启用日志 xferlog_enable=YES # 限制带宽（B/s） local_max_rate=20000000 启动 /usr/local/sbin/vsftpd & 源安装 安装 yum -y install vsftpd 配置 # 默认是 NO listen=YES # 默认是 YES listen_ipv6=NO # 限制带宽（B/s） local_max_rate=20M # 匿名用户访问根目录，默认是 /var/ftp anon_root=/root/ftp-root # 设定匿名用户的最大传输速率，单位（B/s） anon_max_rate=20000000 启动 # 建议用root权限运行，否则会有各种问题 service vsftpd start 常见错误 426 Failure writing network stream.：以上错误由磁盘空间不足导致。 Starting vsftpd for vsftpd: 500 OOPS: vsftpd: not configured for standalone, must be started from inetd： service vsftpd start（yum安装）启动时报以上错误，需要增加 listen=YES 配置 Copyright © 2020 zhoutianju.All rights reserved. "},"ftp/vsftpd-配置虚拟用户.html":{"url":"ftp/vsftpd-配置虚拟用户.html","title":"vsftpd 配置虚拟用户","keywords":"","body":" last modified by zhoutianju , 2020-11-03 17:04:45 vsftpd 配置虚拟用户 前置条件 配置虚拟用户需要安装 pam-devel，源码安装时，编译前，如果没有需要先安装，否则客户端登陆会出现 530 Login incorrect 错误 yum -y install pam-devel 配置 第一步：开放配置 修改 /etc/vsftpd.conf（源安装 /etc/vsftpd/vsftpd.conf）： # 以下配置用于配置虚拟用户 # pam配置文件（对应 /etc/pam.d 下的配置文件名） pam_service_name=vsftpd # 启用虚拟用户 guest_enable=YES # 虚拟用户宿主用户（本地用户） guest_username=work # 虚拟用户使用宿主用户权限 virtual_use_local_privs=YES # 虚拟用户配置文件（用于为每个虚拟用户定制配置项） user_config_dir=/etc/vsftpd/vconf # 限制用户只能在自己根目录下 chroot_local_user=YES chroot_list_enable=NO allow_writeable_chroot=YES 第二步：创建虚拟用户名和密码 创建 vsftpd 配置文件夹 mkdir -p /etc/vsftpd cd /etc/vsftpd # 创建以下文件（文件名无所谓） # 文件名以loginuser.txt为例 # 奇数行为用户名，偶数行为密码 vi loginuser.txt loginuser.txt： upload-user pa55word 第三步：生成虚拟用户名和密码的数据库 创建数据库（数据库名称无所谓），数据库名以 login.db 为例，输入参数为第二步中的用户名密码文件名一致 db_load -T -t hash -f /etc/vsftpd/loginuser.txt /etc/vsftpd/login.db 生成数据库后用户名密码文件就没用了，出于安全考虑可以删掉 以上操作基于 db4-utils，如果没有请先安装 yum -y install db4-utils 第四步：配置 pam 创建或修改 /etc/pam.d/vsftpd（源码安装时需要创建，源安装需要修改，只保留下面两行，其他全注掉） 修改为以下下内容：（此处的 db 属性中的文件名需要与第三步中一致） vsftpd： auth sufficient pam_userdb.so db=/etc/vsftpd/login account sufficient pam_userdb.so db=/etc/vsftpd/login 第五步：创建虚拟用户定制配置 文件夹名无所谓（但需要与第一步中 user_config_dir 属性匹配），以 /etc/vsftpd/vconf 为例 mkdir -p /etc/vsftpd/vconf cd /etc/vsftpd/vconf 为某个虚拟用户创建配置文件，文件名需要和用户名一致，以 work 为例。 work： # 指定虚拟用户的具体主路径 local_root=/home/work/shell # 设定并发客户端访问个数 max_clients=10 # 设定该用户的最大传输速率，单位b/s local_max_rate=20000000 第六步：重启 vsftpd 服务即可 Copyright © 2020 zhoutianju.All rights reserved. "},"ftp/URL-访问加用户名、密码.html":{"url":"ftp/URL-访问加用户名、密码.html","title":"URL 访问加用户名、密码","keywords":"","body":" last modified by zhoutianju , 2020-11-03 17:02:10 URL 访问加用户名、密码 使用以下形式：ftp://user:password@hostname 例如： ftp://work:12345@10.11.11.11:2121 ftp://work:12345@10.11.11.11:2121/test.jar Copyright © 2020 zhoutianju.All rights reserved. "},"网络/DNS-A-记录和-CNAME-记录.html":{"url":"网络/DNS-A-记录和-CNAME-记录.html","title":"DNS A 记录和 CNAME 记录","keywords":"","body":" last modified by zhoutianju , 2020-11-03 16:27:43 DNS A 记录和 CNAME 记录 A 记录 A 记录（Adress 记录），创建域名和 IP 地址的映射，同时也可以设置域名的二级域名。 A 记录用途：可以在输入域名时不用输入 WWW. 来访问网站。 CNAME 记录 CNAME 记录（别名记录），创建域名到另外域名的映射，通常用于同时提供 WWW 和 MAIL 服务的计算机，例如，有一台计算机名为 host.mydomain.com（A 记录）。它同时提供 WWW 和 MAIL 服务，为了便于用户访问服务。可以为该计算机设置两个别名（CNAME）：WWW 和 MAIL。这两个别名的全称就 http://www.mydomain.com/ 和 mail.mydomain.com。实际上他们都指向 host.mydomain.com。 CNAME 记录用途：CNAME 将几个主机名指向一个别名，其实跟指向 IP 地址是一样的，因为这个别名也要做一个 A 记录的。但是使用 CNAME 记录可以很方便地变更 IP 地址。如果一台服务器有100个网站，他们都做了别名，该台服务器变更 IP 时，只需要变更别名的 A 记录就可以了。 Copyright © 2020 zhoutianju.All rights reserved. "},"杂项/Kindle-电子书导出-PDF-格式.html":{"url":"杂项/Kindle-电子书导出-PDF-格式.html","title":"Kindle 电子书导出 PDF 格式","keywords":"","body":" last modified by zhoutianju , 2020-10-29 12:43:33 Kindle 电子书导出 PDF 格式 导出方法可参考：https://www.jianshu.com/p/a00a188044b5 解除 DRM 方法可参考：http://www.zhushiyao.com/?p=38356 特别说明：Calibre 5.X 已经升级了 Python3，DeDRM 插件的主分支还没有升级，Github README 中作者也做了说明，目前尚不支持 5.X，但将来会支持，因此需要安装 Calibre 的早期版本，实际安装的是 4.X。 Copyright © 2020 zhoutianju.All rights reserved. "}}